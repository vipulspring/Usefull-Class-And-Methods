
/*This will open camera display in image view and also convert to base64Image 
respect the android policy and will not ask for full storage permission or requestLegacyExternalStorage*/ 

//Made with media Store and Content getContentResolver

 public void startCamera() {
        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (cameraIntent.resolveActivity(getPackageManager()) != null) {
            Log.i(TAG, "startCamera: " + "Error1");
            File photoFile = createImageFileNew(); // See next step
            photoURI = FileProvider.getUriForFile(this,  this.getPackageName() + ".fileprovider", photoFile);
            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
            startActivityForResult(cameraIntent, REQUEST_IMAGE_CAPTURE);
        }else{
            Log.i(TAG, "startCamera: " + "Error2");
        }

    }

    private File createImageFileNew() {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        try {
            return File.createTempFile(imageFileName, ".jpg", storageDir);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private File compressImage(File originalFile) throws IOException {
        BitmapFactory.Options options = new BitmapFactory.Options();
        Bitmap bitmap = BitmapFactory.decodeFile(originalFile.getAbsolutePath(), options);

        File compressedFile = new File(originalFile.getParent(), "COMPRESSED_" + originalFile.getName());
        FileOutputStream out = new FileOutputStream(compressedFile);
        bitmap.compress(Bitmap.CompressFormat.JPEG, 50, out); // 50% quality
        out.flush();
        out.close();

        return compressedFile;
    }

    public List<String> getBase64StringArrayImagesNew(String imagePathsJson) {
        List<String> images = new ArrayList<>();
        if (TextUtils.isEmpty(imagePathsJson)) return images;
        JsonParser jsonParser = new JsonParser();
        JsonArray jsArray = (JsonArray) jsonParser.parse(imagePathsJson);
        for (JsonElement elem : jsArray) {
            String uriString = elem.getAsString();
            if (TextUtils.isEmpty(uriString)) continue;

            Bitmap bitmap = null;
            try {
                Uri imageUri = Uri.parse(uriString);
                InputStream inputStream = getContentResolver().openInputStream(imageUri);
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = 2; // Compress resolution
                bitmap = BitmapFactory.decodeStream(inputStream, null, options);
                inputStream.close();
            } catch (Exception e) {
                Log.e(TAG, "Failed to decode image from URI: " + uriString, e);
            }

            if (bitmap == null) continue;

            String base64Image = getBase64String(bitmap);
            images.add(base64Image);

            final int chunkSize = 2048;
            for (int i = 0; i < base64Image.length(); i += chunkSize) {
                Log.d(TAG + " Vipul-101", base64Image.substring(i, Math.min(base64Image.length(), i + chunkSize)));
            }

            Log.i(TAG, "getBase64StringImage: " + new Gson().toJson(images) + " - " + images.size());
        }

        return images;
    }
