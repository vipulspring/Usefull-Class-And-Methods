public interface CameraHandler {
    void startCamera(Activity activity);
    Bitmap handleActivityResult(int requestCode, int resultCode, Intent data);
    List<String> getBase64ImagesFromUriJson(String jsonUriList);
    String getUri();

}


//////////////////////////////////////////////////////////////////////////////////////

public class CameraUtilsNew implements CameraHandler{

    private static final int REQUEST_IMAGE_CAPTURE = 101;
    private Uri photoUri;
    private Context context;

    public CameraUtilsNew(Context context) {
        this.context = context;
    }


    @Override
    public void startCamera(Activity activity) {
        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (cameraIntent.resolveActivity(context.getPackageManager()) != null) {
            File photoFile = createImageFile();
            photoUri = FileProvider.getUriForFile(
                    context,
                    context.getPackageName() + ".fileprovider",
                    photoFile
            );
            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
            activity.startActivityForResult(cameraIntent, REQUEST_IMAGE_CAPTURE);

            // Optionally persist the URI for later
            SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
            editor.putString("PREFS_FILE_PATH2", photoUri.toString());
            editor.apply();
        } else {
            Log.e("CameraUtils", "No camera app found");
        }

    }

    private File createImageFile() {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = context.getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        try {
            return File.createTempFile(imageFileName, ".jpg", storageDir);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    @Override
    public Bitmap handleActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == Activity.RESULT_OK) {
            try {
                InputStream ims = context.getContentResolver().openInputStream(photoUri);
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = 2;
                Bitmap bitmap = BitmapFactory.decodeStream(ims, null, options);
                ims.close();
                Log.i("CameraUtils", "Image captured and loaded");
                return bitmap;
            } catch (Exception e) {
                Log.e("CameraUtils", "Image load failed", e);

            }
        }
        return  null;
    }

    @Override
    public List<String> getBase64ImagesFromUriJson(String jsonUriList) {
        List<String> images = new ArrayList<>();
        if (TextUtils.isEmpty(jsonUriList)) return images;
        JsonParser jsonParser = new JsonParser();
        JsonArray jsArray = (JsonArray) jsonParser.parse(jsonUriList);
        for (JsonElement elem : jsArray) {
            String uriString = elem.getAsString();
            if (TextUtils.isEmpty(uriString)) continue;

            Bitmap bitmap = null;
            try {
                Uri imageUri = Uri.parse(uriString);
                InputStream inputStream = context.getContentResolver().openInputStream(imageUri);
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = 2;
                bitmap = BitmapFactory.decodeStream(inputStream, null, options);
                inputStream.close();
            } catch (Exception e) {
                Log.e("CameraUtils", "Failed to decode image from URI", e);
            }

            if (bitmap == null) continue;

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.JPEG, 80, baos);
            String base64Image = Base64.encodeToString(baos.toByteArray(), Base64.NO_WRAP);
            images.add(base64Image);
            final int chunkSize = 2048;
            for (int i = 0; i < base64Image.length(); i += chunkSize) {
                Log.d("CameraUtils" + "CameraUtils ", base64Image.substring(i, Math.min(base64Image.length(), i + chunkSize)));
            }
        }

        return images;

    }

    @Override
    public String getUri() {
        return photoUri.toString();
    }
